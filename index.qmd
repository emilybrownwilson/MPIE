---
title: "MPIE CODE FROM LECTURES"
---
# Lecture 7 : Analyzing survey data
## Generating Coverage Indicators from Survey Data
### Load the child recode from Nigeria's 2013 DHS (NGKRAFL.DTA) into Stata or R:

### R users may need to install/load libraries
R code:
```{r, eval=FALSE}
install.packages("readstata13")
install.packages("tidyverse")
install.packages("survey")
install.packages("freqtables")
```

### Step 5: explore variables 

Stata code:
```{r, eval=FALSE}
des m3*
  
ta m3a
ta m3b
ta m3c
```

R code:
```{r, eval=FALSE}
library(tidyverse)
table(data$m3a)
prop.table(table(data$m3a))
table(data$m3b)
prop.table(table(data$m3b))
table(data$m3c)
prop.table(table(data$m3c))
```

### Step 6: create SBA variable

Stata code:
```{r, eval=FALSE}
gen sba=0
replace sba=1 if m3a==1 | m3b==1 | m3c==1
replace sba=. if m3a==9
```

R code:
```{r, eval=FALSE}
data$sba <- 0
data$sba[data$m3a==1 | data$m3b==1 | data$m3c==1] <- 1
data$sba[data$m3a==9] <- NA
```

### Step 7: check SBA variable
Stata code:
```{r, eval=FALSE}
ta sba m3a, mi
```

R code:
```{r, eval=FALSE}
table(data$sba, data$m3a, exclude=NULL)
```

### Step 8: label variable
Stata code:
```{r, eval=FALSE}
la var sba
la def yn 1"Yes" 0"No"
la val sba yn
ta sba
```

R code:
```{r, eval=FALSE}
data$sba[data$sba==0] <- "No"
data$sba[data$sba==1] <- "Yes"
prop.table(table(data$sba))
```


## Design-based Analysis of Survey Data

### Step 3: svyset your data

Stata code:
```{r, eval=FALSE}
gen nwgt = v005/1000000
svyset v001 [pweight=nwgt], strata(v023) singleunit(centered)
```

R code:
```{r, eval=FALSE}
library(survey)
data$wt <- data$v005/1000000
data <- data %>% filter(v023!=60) # Only 1 PSU in this cluster which is problem for svyby
svydata <- svydesign(id=~v001,strata=~v023, data=data, weights=~wt,nest=TRUE,survey.lonely.psu = "adjust")
```

### Step 4: Look at unweighted versus weighted proportions & run estimation

Stata code:
```{r, eval=FALSE}
tab v106
svy:tab v106
svy: prop sba
prop sba

svy: prop sba
estat effects
```

R code:
```{r, eval=FALSE}
prop.table(table(data$v106))
prop.table(svytable(~ v106, svydata) )

svyby(~sba, ~v000,  svydata, svymean, na.rm=TRUE)

library(freqtables)
data %>% filter(!is.na(sba)) %>% freq_table(sba)

svyby(~sba, ~v000,  svydata, svymean, na.rm=TRUE, deff="replace")
```



# Lecture 8: Analyzing change over time for coverage
## Assessing Change in Intervention Coverage - Option 1
### Change directory to where your data are stored
### Use the child recodes from Nigeria's 2008 and 2013 DHS in Stata or R
R users may need to install/load these libraries
```{r, eval=FALSE}
install.packages("dplyr")
install.packages("tidyr")
install.packages("tidyverse")
install.packages("survey")
install.packages("haven")
install.packages("labelled")
install.packages("knitr")
install.packages("multcomp")

library(dplyr)
library(tidyr)
library(tidyverse)
library(survey)
library(haven)
library(labelled)
library(knitr)
library(multcomp)
```

### Step 1: Create coverage indicators (in both datasets)

Stata code:
```{r, eval=FALSE}
use DHS_Nigeria2008_kids.dta, clear
numlabel, add

des v005 h11 h13 h31 h31b h32z v024

* Svy set the data
	gen wgt = v005/1000000
	sum wgt 
	gen nwgt=wgt/r(mean)
	sum nwgt
	
	svyset v001 [pw=nwgt], strata(v023) singleunit(centered)	
	
* Create diarrhea variable
	tab h11
	gen diarrhea=0 if h11==0
	replace diarrhea=1 if h11==2
	replace diarrhea=0 if h11==8|h11==9
	svy: ta diarrhea

* Create ORS treatment
	tab h13
	gen ors=0 if diarrhea==1
	replace ors=1 if h13==2
	svy: tab ors


```

R code:
```{r, eval=FALSE}
#******** REMEMBER TO REPLACE TO YOUR DIRECTORY ********#

# Household DHS 2008
hh_2008 <- read_dta("...DHS_Nigeria2008_HH.dta")
#dict_hh08 <- generate_dictionary(hh_2008) # Creates a data dictionary
gc() # Clear memory

# Kids DHS 2008
kids_2008 <- read_dta("...DHS_Nigeria2008_kids.dta")

# Household DHS 2013
hh_2013 <-  read_dta("...DHS_Nigeria2013_HH.dta")

# Kids DHS 2013
kids_2013 <-  read_dta("...DHS_Nigeria2013_kids.dta")


kids_2008_des <- kids_2008[,c("v005","h11","h13","h31","h31b","h32z","v024")]
str(kids_2008_des)

kids_2008 <- kids_2008 %>%
  mutate(diarrhea = case_when(h11 == 0 ~ 0,
                              h11 == 2 ~ 1,
                              h11 == 8 | h11 == 9 ~ 0))
kids_2008 <- kids_2008 %>%
  mutate(ors = case_when(diarrhea == 1 & h13 == 2 ~ 1,
                         diarrhea == 1 & !h13 == 2 ~ 0))

kids_2008$wgt <- kids_2008$v005/1000000 # Correct weighting
kids_2008$nwgt <- kids_2008$wgt/mean(kids_2008$wgt) # Create normalized weighting

# Svy set the data
  svyset_2008 <- svydesign(
  id = ~ v001, # Variable which represents the cluster
  data = kids_2008, # The name of your data that you are using
  weight = ~ nwgt, # Here we use normalized weighting
  strata = ~ v023, # Variable which represents the stratum
  nest = TRUE, # relabel cluster ids to enforce nesting within strata
  survey.lonely.psu = "adjust") # Single unit centered on STATA
  
  options(survey.lonely.psu="adjust")
  
kable(prop.table(svytable(~ors, design = svyset_2008))*100)  
```

### Step 2a: Prepare 2008 and 2013 datasets to be combined

Stata code:
```{r, eval=FALSE}
***2008 DHS
* keep variables of interest
	keep caseid midx v001 v002 v003 v005 v012 v022 v024 v025 v106 v190 v116 v023 diarrhea ors nwgt
	save nigeria2008, replace

* Call household dataset to obtain household size
	use DHS_Nigeria2008_HH, clear
	keep  hvidx  hv012 hv001 hv002 
	rename hv001 v001
	rename hvidx v003
	rename hv002 v002
	sort v001 v002 v003
	save nigeria2008HH, replace

* Merge both datasets
	use nigeria2008, clear
	sort v001 v002 v003
	merge m:1 v001 v002 v003 using nigeria2008HH
	keep if _merge==3
	drop _merge

	save nigeria2008anal, replace
	
***2013 Nigeria dataset
	use DHS_Nigeria2013_kids.dta, clear  

* Svy set the data
	gen wgt = v005/1000000
	sum wgt 
	gen nwgt=wgt/r(mean)
	sum nwgt
	
	svyset v001 [pw=nwgt], strata(v023) singleunit(centered)	

* Create diarrhea variable
	gen diarrhea=0 if h11==0
	replace diarrhea=1 if h11==2
	replace diarrhea=0 if h11==8|h11==9

* Create ORS treatment
	gen ors=0 if diarrhea==1
	replace ors=1 if h13==2

* keep variables of interest
	keep caseid midx v001 v002 v003 v005 v012 v022 v024 v025 v106 v190 v116 v023 diarrhea ors nwgt
		save nigeria2013, replace

* Call household dataset to obtain household size
	use DHS_Nigeria2013_HH, clear
	keep  hvidx  hv012 hv001 hv002 
	rename hv001 v001
	rename hvidx v003
	rename hv002 v002
	sort v001 v002 v003
	save nigeria2013HH, replace

* Merge both datasets
	use nigeria2013, clear
	sort v001 v002 v003
	merge m:1 v001 v002 v003 using nigeria2013HH
	keep if _merge==3

	drop _merge
	gen survey=1
	save nigeria2013anal, replace	
```

R code:
```{r, eval=FALSE}
# Select only the variables of interest
kids_2008 <- kids_2008[,c("caseid", "midx", "v001", "v002", "v003", "v005", "v012", "v022", "v024", "v025", "v106", "v190", "v116", "v023", "diarrhea", "ors", "nwgt")]

# Get the household size from this dataset
hh_2008 <- hh_2008 %>%
  rename(v001 = hv001,
         v002 = hv002,
         v003 = hvidx)

# Join household size data to the kids dataset
kids_2008 <- kids_2008 %>%
  left_join(hh_2008, by = c("v001", "v002", "v003"))


########## Repeat indicator creation for 2013
kids_2013 <- kids_2013 %>%
  mutate(diarrhea = case_when(h11 == 0 ~ 0,
                              h11 == 2 ~ 1,
                              h11 == 8 | h11 == 9 ~ 0))
kids_2013 <- kids_2013 %>%
  mutate(ors = case_when(diarrhea == 1 & h13 == 2 ~ 1,
                         diarrhea == 1 & !h13 == 2 ~ 0))

kids_2013$wgt <- kids_2013$v005/1000000 # Correct weighting
kids_2013$nwgt <- kids_2013$wgt/mean(kids_2013$wgt) # Create normalized weighting

# Svy set the data
  svyset_2013 <- svydesign(
  id = ~ v001, # Variable which represents the cluster
  data = kids_2013, # The name of your data that you are using
  weight = ~ nwgt, # Here we use normalized weighting
  strata = ~ v023, # Variable which represents the stratum
  nest = TRUE, # relabel cluster ids to enforce nesting within strata
  survey.lonely.psu = "adjust") # Single unit centered on STATA
  
  options(survey.lonely.psu="adjust")
  
kable(prop.table(svytable(~ors, design = svyset_2013))*100)  

kids_2013$wgt <- kids_2013$v005/1000000 # Correct weighting
kids_2013$nwgt <- kids_2013$wgt/mean(kids_2013$wgt) # Create normalized weighting

svyset_2013 <- svydesign(
    id = ~ v001, # Variable which represents the cluster
    data = kids_2013, # The name of your data that you are using
    weight = ~ nwgt, # Here we use normalized weighting
    strata = ~ v023, # Variable which represents the stratum
    nest = TRUE, # relabel cluster ids to enforce nesting within strata
    survey.lonely.psu = "adjust") # Single unit centered on STATA
  
  options(survey.lonely.psu="adjust")
  
kable(prop.table(svytable(~ors, design = svyset_2013))*100)

# Select only the variables of interest
kids_2013 <- kids_2013[,c("caseid", "midx", "v001", "v002", "v003", "v005", "v012", "v022", "v024", "v025", "v106", "v190", "v116", "v023", "diarrhea", "ors", "nwgt")]

# Get the household size from this dataset
hh_2013 <- hh_2013 %>%
  rename(v001 = hv001,
         v002 = hv002,
         v003 = hvidx)

# Join household size data to the kids dataset
kids_2013 <- kids_2013 %>%
  left_join(hh_2013, by = c("v001", "v002", "v003"))

```

### Step 2b: Append datasets (Stata) / rbind datasets (R)

Stata code:
```{r, eval=FALSE}
* Append datasets
	use nigeria2008anal, clear
	gen survey=0
	append using nigeria2013anal
	save nigeria2008_2013, replace
```

R code:
```{r, eval=FALSE}
kids_2008$survey <- 0 # Indicates BASELINE
kids_2013$survey <- 1 # Indicates ENDLINE

kids_2008$survey_label <- "DHS 2008" # Indicates BASELINE
kids_2013$survey_label <- "DHS 2013" # Indicates ENDLINE

val_labels(kids_2008) <- NULL # Labels need to removed from the dataset for row binding to happen or else ERROR
val_labels(kids_2013) <- NULL
merged <- rbind(kids_2008, kids_2013) # Merge the two datasets together
```


### Step 3: set svy for pooled dataset

Stata code:
```{r, eval=FALSE}
use nigeria2008_2013, clear
egen stratum = group(v023 survey)
svyset v001 [pw=nwgt], strata(stratum) singleunit(centered)
svy: prop ors, over(survey)
svy: prop ors, over(survey) coeflegend
```

R code:
```{r, eval=FALSE}
# Need to establish need stratum for each survey because currently they are overlapped (i.e. same stratum value across both surveys)

merged$cluster <- paste0(merged$survey,"_",merged$v001)
merged$stratum <- paste0(merged$survey,"_",merged$v023)

  svyset_merge <- svydesign(
    id = ~ cluster, # Variable which represents the cluster
    data = merged, # The name of your data that you are using
    weight = ~ nwgt, # Here we use normalized weighting
    strata = ~ factor(stratum), # Variable which represents the stratum
    nest = TRUE, # relabel cluster ids to enforce nesting within strata
    survey.lonely.psu = "adjust") # Single unit centered on STATA

options(survey.lonely.psu="adjust")
  
kable(svyby(~I(ors == 0), ~survey_label, design = svyset_merge, svyciprop, vartype="ci", method = "logit"))
kable(svyby(~I(ors == 1), ~survey_label, design = svyset_merge, svyciprop, vartype="ci", method = "logit"))

ors_merged <- svyby(~ors, ~survey_label, svyset_merge, svyciprop, na.rm = TRUE, vartype = "se", method = "logit")
ors_merged
100*confint(ors_merged)

ors_diff <- svycontrast(ors_merged, quote(`DHS 2013` - `DHS 2008`)) # Standard error is needed to calculate the difference
ors_diff*100
confint(ors_diff)*100 # SE and CI are slightly different to STATA output
```


## Assessing Change in Intervention Coverage - Option 2
### Step 4: Run the logit model of the output variable on time

Stata code:
```{r, eval=FALSE}
* Assess changes between 2008 and 2013
	svy: logit ors survey, or
```

R code:
```{r, eval=FALSE}
ors.glm <- svyglm(ors ~ survey, family = quasibinomial, design = svyset_merge, na.action = na.omit)
kable(data.frame(OR = exp(coef(ors.glm)), ci = exp(confint(ors.glm)))) #create a table of results to include odds ratio + CI
```

### Step 5: Control for other variables

Stata code:
```{r, eval=FALSE}
* toilet
	numlabel, add
	tab v116
	tab v116, nol
	recode v116 11/15=1 21/23=2 31=3 41/99=4, gen(toilet)
	lab def toilet 1 "flush" 2"latrine" 3"no facility" 4"Other"
	lab val toilet toilet

* Urban/rural	
	tab v025
	gen rural=v025==2
	tab rural

xi: svy: logit ors survey i.v106 i.v190 hv012 i.toilet rural, or

svy: logit ors survey, or
```

R code:
```{r, eval=FALSE}
merged <- merged %>%
  mutate(toilet = case_when(v116 >= 11 & v116 <= 15 ~ "flush",
                            v116 >= 21 & v116 <= 23 ~ "latrine",
                            v116 == 31 ~ "no facility",
                            v116 == 41 | v116 == 99 ~ "Other"),
         rural = case_when(v025 == 1 ~ 0,
                           v025 == 2 ~ 1))

  svyset_merge <- svydesign(
    id = ~ cluster, # Variable which represents the unique id
    data = merged, # The name of your data that you are using
    weight = ~ nwgt, # Here we use normalized weighting
    strata = ~ factor(stratum), # Variable which represents the stratum
    nest = TRUE, # relabel cluster ids to enforce nesting within strata
    survey.lonely.psu = "adjust") # Single unit centered on STATA

ors.adjust.glm <- svyglm(ors ~ survey_label + as.factor(v106) + as.factor(v190) + hv012 + toilet + rural, family = quasibinomial, design = svyset_merge, na.action = na.omit)
kable(data.frame(OR = exp(coef(ors.adjust.glm)), ci = exp(confint(ors.adjust.glm)))) #create a table of results to include odds ratio + CI
```

# Lecture 12: Difference-in-differences analysis for coverage

R users may need to load these libraries
```{r, eval=FALSE}
library(haven)
library(readstata13)
library(dplyr)
library(survey)
library(knitr)
```


### Setting-up the data
Stata code:
```{r, eval=FALSE}
cd "/Users/MY_NAME/Desktop/MPIE/data" //change this to directory where anc4_nigeria.dta is stored
use anc4_nigeria, clear

gen wgt=v005/1000000
svyset v001 [pw=wgt], strata(v023) singleunit(center)

numlabel, add

gen survey=1 if v007==2013
replace survey=0 if v007==2008

gen program=region 

gen groups=0 if program==1 & v007==2008 
replace groups=1 if program==1 & v007==2013 
replace groups=2 if program==0 & v007==2008 
replace groups=3 if program==0 & v007==2013 
```

R code:
```{r, eval=FALSE}
dat <- read_dta("/Users/MY_NAME/Desktop/MPIE/data/anc4_nigeria.dta") # change this to where anc4_nigeria.dta is stored

dat <- dat %>%
  mutate(wgt = v005/1000000) 

dat$survey <- NA
dat$survey[dat$v007==2013] <- 1
dat$survey[dat$v007==2008] <- 0

dat$program <- dat$region

dat$groups <- NA
dat$groups[dat$program==1 & dat$v007==2008] <- 0 
dat$groups[dat$program==1 & dat$v007==2013] <- 1 
dat$groups[dat$program==0 & dat$v007==2008] <- 2 
dat$groups[dat$program==0 & dat$v007==2013] <- 3 

svydata <- svydesign(id=~v001, data=dat, weights=~wgt, 
                     strata=~v023, survey.lonely.psu="adjust", nest=TRUE)
```

### Option 1: Difference in differences of proportions
Stata code:
```{r, eval=FALSE}
svy: prop anc4, over(groups) 

lincom [[_prop_2]1 - [_prop_2]0] - [[_prop_2]3 - [_prop_2]2]
```

R code
```{r, eval=FALSE}
anc4_dat <- svyby(~anc4, ~groups, svydata, svyciprop, na.rm = TRUE, 
                  vartype = c("se","ci"), method = "logit")
anc4_dat

anc4_diff <- svycontrast(anc4_dat, quote((`1`-`0`) - (`3`-`2`))) 
anc4_diff
```

### Option 2: Logistic regression
Stata code:
```{r, eval=FALSE}
xi: svy: logit anc4 i.survey*i.program, or 

lincom  _Isurvey_1 + _IsurXpro_1_1, or  
  
svy: prop anc4, over(v007 region) 
```

R code:
```{r, eval=FALSE}
anc.adjust.glm <- svyglm(anc4 ~ as.factor(survey)*as.factor(program), 
                         family = quasibinomial, design = svydata, na.action = na.omit)
kable(data.frame(OR = exp(coef(anc.adjust.glm)), ci = exp(confint(anc.adjust.glm)))) 

anc4_or <- svycontrast(anc.adjust.glm, quote(`as.factor(survey)1` + `as.factor(survey)1:as.factor(program)1`)) 
exp(anc4_or)

kable(svyby(~I(anc4 == 0), ~region+v007, design = svydata, svyciprop, vartype="ci", method = "logit"))
kable(svyby(~I(anc4 == 1), ~region+v007, design = svydata, svyciprop, vartype="ci", method = "logit"))
```




# Lecture 16: Analyzing equity
### new packages needed
R code:
```{r, eval=FALSE}
install.packages("healthequal") 
install.package("gglorenz")

library(healthequal)
library(ggloernz)
```

### make concentration index plot
R code:
```{r, eval=FALSE}
  ggplot(data=subset_data, aes(x = abs(equity_variable))) +
  stat_lorenz() +
  geom_abline(linetype = "dashed") 
```




